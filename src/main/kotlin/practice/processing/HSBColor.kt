package practice.processing

import common.RecorderablePApplet

/**
 * Generative Art Practice Video by using HSB Color, RGB Color of Processing.
 * This Generative Art Practice Video generated by using Processing and Kotlin
 *
 * Time table
 * 0:00 change hue from 0 degrees to 360 degrees
 * 3:00 change satuation from 0 to 100
 * 3:50 change brightness from 0 to 100
 *
 * Switch color mode to HSB mode or RGB mode.
 */
class HSBColor : RecorderablePApplet() {
    var hue: Float = 0F
    override fun setupBody() {
        println("setupBody")
        //set white background
        background(255F, 255F, 255F, 255F)
    }

    override fun drawBody() {
        println("drawBody: ${frameCount}")
        colorMode(HSB, 360F, 100F, 100F, 100F)
        when {
            frameCount in (1..10800) -> {//0:00 change hue from 0 degrees to 360 degrees
                hueColor(frameCount)
            }
            frameCount in (10801..13800) -> {//3:00 change satuation from 0 to 100
                sbColor(frameCount - 10800, saturation = {
                    it.toFloat() / getFps().toFloat() * 2F
                }, brightness = {
                    100F
                })
            }
            frameCount in (13801..16811) -> {//3:50 change brightness from 0 to 100
                sbColor(frameCount - 13800, saturation = {
                    100F
                }, brightness = {
                    it.toFloat() / getFps().toFloat() * 2F
                })
            }
            frameCount in (16812..18000) -> {
            }
            else -> exit()
        }
    }

    private fun sbColor(cnt: Int, saturation: (Int) -> Float, brightness: (Int) -> Float) {
        if ((cnt) % (getFps().toInt() / 2) == 1) {
            //switch hsb color mode
            colorMode(HSB, 360F, 100F, 100F, 100F)
            textSize(20F)
            val radius = 100F
            val widthMargin: Float = (getScreenWidth() - radius * 2 * 4) / 5F
            val heightMargin: Float = (getScreenHeight() - radius * 2 * 3) / 4F
            background(0F, 0F, 100F, 100F)
            var idx: Int = 0
            for (x in (1..4)) {
                for (y in (1..3)) {
                    hue = 30F * idx
                    idx += 1
                    stroke(hue, saturation(cnt), brightness(cnt), 100F)
                    fill(hue, saturation(cnt), brightness(cnt), 100F)
                    val pointX = (widthMargin + radius * 2F) * (x - 1) + radius + widthMargin
                    val pointY = (heightMargin + radius * 2F) * (y - 1) + radius + heightMargin / 4
                    ellipse(
                        pointX,
                        pointY,
                        radius * 2,
                        radius * 2
                    )
                    val hueInfo = "HUE: ${hue}"
                    text(
                        hueInfo,
                        pointX - textWidth(hueInfo) / 2F,
                        pointY + radius + heightMargin / 2F
                    )
                }
            }
            fill(0F, 0F, 0F, 100F)
            val sbInfo = "Saturation: ${saturation(cnt).toInt()}\nbrightness: ${brightness(cnt).toInt()}"
            text(
                sbInfo,
                (getScreenWidth() - textWidth(sbInfo)) / 2F,
                heightMargin / 2F
            )
        }
    }

    private fun hueColor(cnt: Int) {
        if ((cnt - 1) % (getFps().toInt() / 2) == 0) {
            //switch hsb color mode
            colorMode(HSB, 360F, 100F, 100F, 100F)
            background(0F, 0F, 100F, 100F)
            val hueColor = color(hue, 100F, 100F, 100F)
            stroke(hueColor)
            fill(hueColor)

            ellipse(
                getScreenWidth() / 2F,
                getScreenHeight() / 2F,
                getScreenHeight() / 2F,
                getScreenHeight() / 2F
            )
            hue += 1F
            textSize(20F)
            //switch rgb color mode
            colorMode(RGB, 255F)
            val colorInfo = "HUE: ${hue.toInt()}, Saturation: 100, Brightness: 100\n" +
                    "Red: ${red(hueColor)}, Green: ${green(hueColor)}, Blue: ${blue(hueColor)}"
            text(
                colorInfo,
                (getScreenWidth().toFloat() - textWidth(colorInfo)) / 2F,
                getScreenHeight() * 4F / 5F
            )
        }
    }

    override fun getRecordFilePath(): String = "../out/practice/${this::class.simpleName}.mp4"

    override fun exitBody() {
        println("exitBody")
    }

    fun run() {
        main("${this::class.qualifiedName}", arrayOf())
    }
}

fun main() {
    HSBColor().run()
}