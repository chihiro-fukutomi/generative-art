package practice

/**
 * Generative Art Practice Video by using point, line, rect, ellipse, random of Processing
 * This Generative Art Practice Video generated by using Processing and Kotlin
 *
 * 0:00: draw randomly white points
 * 0:15: draw randomly colorful circles
 * 0:30: draw colorful rects toward upper left
 * 0:35: draw colorful rects toward bottom left
 * 0:40: draw colorful rects toward bottom right
 * 0:45: draw colorful rects toward top right
 * 0:50: draw white lines for cleaning screen
 * 1:50: draw white lines for cleaning the rest of blend
 */
class DrawBasicFigure : RecorderablePApplet() {
    override fun setupBody() {
        println("setupBody")
        //set black background
        background(0F, 0F, 0F, 0F)
    }

    override fun drawBody() {
        println("drawBody, frameCount: ${frameCount}")
        when {
            //0:00: draw randomly white points
            frameCount <= 900 -> drawPoint(frameCount)
            //0:15: draw randomly colorful circles
            frameCount in (901..1800) -> drawEllipse(frameCount - 900)
            //0:30: draw rects toward upper left
            frameCount in (1801..2100) -> {
                drawRect(frameCount - 1800, x = { 0F }, y = { 0F })
            }
            //0:35: draw rects toward bottom left
            frameCount in (2101..2400) -> {
                drawRect(frameCount - 2100, x = { 0F }, y = {
                    val rate: Float = Math.min(it.toFloat() / 300F, 1F)
                    getScreenHeight().toFloat() * rate
                })
            }
            //0:40: draw rects toward bottom right
            frameCount in (2401..2700) -> {
                drawRect(frameCount - 2400, x = {
                    val rate: Float = Math.min(it.toFloat() / 300F, 1F)
                    getScreenWidth().toFloat() * rate
                }, y = {
                    val rate: Float = Math.min(it.toFloat() / 300F, 1F)
                    getScreenHeight().toFloat() * rate
                })
            }
            //0:45: draw rects toward top right
            frameCount in (2701..3000) -> {
                drawRect(frameCount - 2700, x = {
                    val rate: Float = Math.min(it.toFloat() / 300F, 1F)
                    getScreenWidth().toFloat() * rate
                }, y = { 0F })
            }
            //0:50: draw lines for cleaning screen
            frameCount in (3001..6000) -> {
                drawLine(frameCount - 3000, 0F, 0F, x2 = {
                    val result: Float = if (it <= getScreenWidth()) {
                        it.toFloat()
                    } else {
                        getScreenWidth().toFloat()
                    }
                    result
                }, y2 = {
                    val candidate = getScreenWidth() - it + getScreenHeight()
                    val result: Float = if (it <= getScreenWidth() && candidate < 0) {
                        getScreenHeight().toFloat()
                    } else {
                        candidate.toFloat()
                    }
                    result
                })
            }
            //1:50: draw lines for cleaning the rest of blend
            frameCount in (6001..9000) -> {
                drawLine(frameCount - 6000, 0F, 0F, x2 = {
                    val candidate = getScreenHeight() - it + getScreenWidth()
                    val result: Float = if (it <= getScreenHeight() && candidate < 0) {
                        getScreenWidth().toFloat()
                    } else {
                        candidate.toFloat()
                    }
                    result
                }, y2 = {
                    val result: Float = if (it <= getScreenHeight()) {
                        it.toFloat()
                    } else {
                        getScreenHeight().toFloat()
                    }
                    result
                })
            }
            else -> exit()
        }
    }

    //draw line from point(x,y) to point(x2,y2)
    //assign x2, y2 by using function
    private fun drawLine(
        cnt: Int,
        x: Float,
        y: Float,
        x2: (Int) -> Float,
        y2: (Int) -> Float
    ) {
        //white line draw
        stroke(255F, 255F, 255F, 255F)
        line(x, y, x2(cnt), y2(cnt))
    }

    //draw rect with top left point (x,y) and width, height which gradually shorten
    //assign x, y by using function
    //duration is drawing interval
    private fun drawRect(
        cnt: Int,
        duration: Int = 30,
        x: (Int) -> Float,
        y: (Int) -> Float
    ) {
        if ((cnt - 1) % duration == 0) {
            val red = random(255F)
            val green = random(255F)
            val blue = random(255F)
            fill(red, green, blue, 255F)
            stroke(255F, 255F, 255F, 255F)
            val rate: Float = Math.min(1F - ((cnt.toFloat() - 1) / 300F), 1F)
            rect(x(cnt - 1), y(cnt - 1), getScreenWidth().toFloat() * rate, getScreenHeight().toFloat() * rate)
        }
    }

    //Randomly draw colorful circles
    //Gradually increase circles
    private fun drawEllipse(cnt: Int) {
        stroke(255F, 255F, 255F, 255F)
        //ellipse width and height
        //it results in circle that width equals height
        val width: Float = 30F
        val height: Float = 30F
        repeat(cnt / 20 + 1) {
            val red = random(255F)
            val green = random(255F)
            val blue = random(255F)
            fill(red, green, blue, 255F)
            //centerX and centerY are center of circle
            val centerX: Float = random(getScreenWidth().toFloat())
            val centerY: Float = random(getScreenHeight().toFloat())
            ellipse(centerX, centerY, width, height)
        }
    }

    //Randomly draw white points
    //Gradually increase points
    private fun drawPoint(cnt: Int) {
        stroke(255F, 255F, 255F, 255F)
        repeat(cnt) {
            //randomly generate point
            val pointX = random(getScreenWidth().toFloat())
            val pointY = random(getScreenHeight().toFloat())
            //draw dot in (pointX, pointY)
            //Upper left coordinate system
            point(pointX, pointY)
        }
    }

    override fun isRecordOnly(): Boolean = true

    override fun getRecordFilePath(): String = "../out/${DrawBasicFigure::class.simpleName}.mp4"

    override fun exitBody() {
        println("exitBody")
    }

    fun run() {
        main("practice.DrawBasicFigure", arrayOf())
    }
}

fun main() {
    DrawBasicFigure().run()
}